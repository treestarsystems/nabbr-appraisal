{"version":3,"file":"index.mjs","sources":["../../src/splitter/BaseSplitter.vue","../../src/splitter/Splitter.vue","../../src/splitter/Splitter.vue?vue&type=template&id=acb2cbae&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport SplitterStyle from 'primevue/splitter/style';\n\nexport default {\n    name: 'BaseSplitter',\n    extends: BaseComponent,\n    props: {\n        layout: {\n            type: String,\n            default: 'horizontal'\n        },\n        gutterSize: {\n            type: Number,\n            default: 4\n        },\n        stateKey: {\n            type: String,\n            default: null\n        },\n        stateStorage: {\n            type: String,\n            default: 'session'\n        },\n        step: {\n            type: Number,\n            default: 5\n        }\n    },\n    style: SplitterStyle,\n    provide() {\n        return {\n            $pcSplitter: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" :data-p-resizing=\"false\" v-bind=\"ptmi('root', getPTOptions)\">\n        <template v-for=\"(panel, i) of panels\" :key=\"i\">\n            <component :is=\"panel\" tabindex=\"-1\"></component>\n            <div\n                v-if=\"i !== panels.length - 1\"\n                ref=\"gutter\"\n                :class=\"cx('gutter')\"\n                role=\"separator\"\n                tabindex=\"-1\"\n                @mousedown=\"onGutterMouseDown($event, i)\"\n                @touchstart=\"onGutterTouchStart($event, i)\"\n                @touchmove=\"onGutterTouchMove($event, i)\"\n                @touchend=\"onGutterTouchEnd($event, i)\"\n                :data-p-gutter-resizing=\"false\"\n                v-bind=\"ptm('gutter')\"\n            >\n                <div :class=\"cx('gutterHandle')\" tabindex=\"0\" :style=\"[gutterStyle]\" :aria-orientation=\"layout\" :aria-valuenow=\"prevSize\" @keyup=\"onGutterKeyUp\" @keydown=\"onGutterKeyDown($event, i)\" v-bind=\"ptm('gutterHandle')\"></div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { getHeight, getOuterHeight, getOuterWidth, getWidth } from '@primeuix/utils/dom';\nimport { isArray } from '@primeuix/utils/object';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport BaseSplitter from './BaseSplitter.vue';\n\nexport default {\n    name: 'Splitter',\n    extends: BaseSplitter,\n    inheritAttrs: false,\n    emits: ['resizestart', 'resizeend', 'resize'],\n    dragging: false,\n    mouseMoveListener: null,\n    mouseUpListener: null,\n    touchMoveListener: null,\n    touchEndListener: null,\n    size: null,\n    gutterElement: null,\n    startPos: null,\n    prevPanelElement: null,\n    nextPanelElement: null,\n    nextPanelSize: null,\n    prevPanelSize: null,\n    panelSizes: null,\n    prevPanelIndex: null,\n    timer: null,\n    mutationObserver: null,\n    data() {\n        return {\n            prevSize: null,\n            isRTL: false\n        };\n    },\n    mounted() {\n        this.initializePanels();\n        this.updateDirection();\n        this.observeDirectionChanges();\n    },\n    beforeUnmount() {\n        this.clear();\n        this.unbindMouseListeners();\n\n        if (this.mutationObserver) {\n            this.mutationObserver.disconnect();\n        }\n    },\n    methods: {\n        updateDirection() {\n            this.isRTL = !!this.$el.closest('[dir=\"rtl\"]');\n        },\n        observeDirectionChanges() {\n            const targetNode = document.documentElement;\n            const config = { attributes: true, attributeFilter: ['dir'] };\n\n            this.mutationObserver = new MutationObserver(() => {\n                this.updateDirection();\n            });\n\n            this.mutationObserver.observe(targetNode, config);\n        },\n        isSplitterPanel(child) {\n            return child.type.name === 'SplitterPanel';\n        },\n        initializePanels() {\n            if (this.panels && this.panels.length) {\n                let initialized = false;\n\n                if (this.isStateful()) {\n                    initialized = this.restoreState();\n                }\n\n                if (!initialized) {\n                    let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n                    let _panelSizes = [];\n\n                    this.panels.map((panel, i) => {\n                        let panelInitialSize = panel.props && panel.props.size ? panel.props.size : null;\n                        let panelSize = panelInitialSize || 100 / this.panels.length;\n\n                        _panelSizes[i] = panelSize;\n                        children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                    });\n\n                    this.panelSizes = _panelSizes;\n                    this.prevSize = parseFloat(_panelSizes[0]).toFixed(4);\n                }\n            }\n        },\n        onResizeStart(event, index, isKeyDown) {\n            this.gutterElement = event.currentTarget || event.target.parentElement;\n            this.size = this.horizontal ? getWidth(this.$el) : getHeight(this.$el);\n\n            if (!isKeyDown) {\n                this.dragging = true;\n                this.startPos = this.layout === 'horizontal' ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n            }\n\n            this.prevPanelElement = this.gutterElement.previousElementSibling;\n            this.nextPanelElement = this.gutterElement.nextElementSibling;\n\n            if (isKeyDown) {\n                this.prevPanelSize = this.horizontal ? getOuterWidth(this.prevPanelElement, true) : getOuterHeight(this.prevPanelElement, true);\n                this.nextPanelSize = this.horizontal ? getOuterWidth(this.nextPanelElement, true) : getOuterHeight(this.nextPanelElement, true);\n            } else {\n                this.prevPanelSize = (100 * (this.horizontal ? getOuterWidth(this.prevPanelElement, true) : getOuterHeight(this.prevPanelElement, true))) / this.size;\n                this.nextPanelSize = (100 * (this.horizontal ? getOuterWidth(this.nextPanelElement, true) : getOuterHeight(this.nextPanelElement, true))) / this.size;\n            }\n\n            this.prevPanelIndex = index;\n            this.$emit('resizestart', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter[index].setAttribute('data-p-gutter-resizing', true);\n            this.$el.setAttribute('data-p-resizing', true);\n        },\n        onResize(event, step, isKeyDown) {\n            let newPos, newPrevPanelSize, newNextPanelSize;\n\n            if (isKeyDown) {\n                if (this.horizontal) {\n                    newPrevPanelSize = (100 * (this.prevPanelSize + step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize - step)) / this.size;\n                } else {\n                    newPrevPanelSize = (100 * (this.prevPanelSize - step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize + step)) / this.size;\n                }\n            } else {\n                if (this.horizontal) {\n                    if (this.isRTL) {\n                        newPos = ((this.startPos - event.pageX) * 100) / this.size;\n                    } else {\n                        newPos = ((event.pageX - this.startPos) * 100) / this.size;\n                    }\n                } else {\n                    newPos = ((event.pageY - this.startPos) * 100) / this.size;\n                }\n\n                newPrevPanelSize = this.prevPanelSize + newPos;\n                newNextPanelSize = this.nextPanelSize - newPos;\n            }\n\n            if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n                this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n                this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n                this.prevSize = parseFloat(newPrevPanelSize).toFixed(4);\n            }\n\n            this.$emit('resize', { originalEvent: event, sizes: this.panelSizes });\n        },\n        onResizeEnd(event) {\n            if (this.isStateful()) {\n                this.saveState();\n            }\n\n            this.$emit('resizeend', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter.forEach((gutter) => gutter.setAttribute('data-p-gutter-resizing', false));\n            this.$el.setAttribute('data-p-resizing', false);\n            this.clear();\n        },\n        repeat(event, index, step) {\n            this.onResizeStart(event, index, true);\n            this.onResize(event, step, true);\n        },\n        setTimer(event, index, step) {\n            if (!this.timer) {\n                this.timer = setInterval(() => {\n                    this.repeat(event, index, step);\n                }, 40);\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n                this.timer = null;\n            }\n        },\n        onGutterKeyUp() {\n            this.clearTimer();\n            this.onResizeEnd();\n        },\n        onGutterKeyDown(event, index) {\n            switch (event.code) {\n                case 'ArrowLeft': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowRight': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowDown': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowUp': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                default:\n                    //no op\n                    break;\n            }\n        },\n        onGutterMouseDown(event, index) {\n            this.onResizeStart(event, index);\n            this.bindMouseListeners();\n        },\n        onGutterTouchStart(event, index) {\n            this.onResizeStart(event, index);\n            this.bindTouchListeners();\n            event.preventDefault();\n        },\n        onGutterTouchMove(event) {\n            this.onResize(event);\n            event.preventDefault();\n        },\n        onGutterTouchEnd(event) {\n            this.onResizeEnd(event);\n            this.unbindTouchListeners();\n            event.preventDefault();\n        },\n        bindMouseListeners() {\n            if (!this.mouseMoveListener) {\n                this.mouseMoveListener = (event) => this.onResize(event);\n                document.addEventListener('mousemove', this.mouseMoveListener);\n            }\n\n            if (!this.mouseUpListener) {\n                this.mouseUpListener = (event) => {\n                    this.onResizeEnd(event);\n                    this.unbindMouseListeners();\n                };\n\n                document.addEventListener('mouseup', this.mouseUpListener);\n            }\n        },\n        bindTouchListeners() {\n            if (!this.touchMoveListener) {\n                this.touchMoveListener = (event) => this.onResize(event.changedTouches[0]);\n                document.addEventListener('touchmove', this.touchMoveListener);\n            }\n\n            if (!this.touchEndListener) {\n                this.touchEndListener = (event) => {\n                    this.resizeEnd(event);\n                    this.unbindTouchListeners();\n                };\n\n                document.addEventListener('touchend', this.touchEndListener);\n            }\n        },\n        validateResize(newPrevPanelSize, newNextPanelSize) {\n            if (newPrevPanelSize > 100 || newPrevPanelSize < 0) return false;\n            if (newNextPanelSize > 100 || newNextPanelSize < 0) return false;\n\n            let prevPanelMinSize = getVNodeProp(this.panels[this.prevPanelIndex], 'minSize');\n\n            if (this.panels[this.prevPanelIndex].props && prevPanelMinSize && prevPanelMinSize > newPrevPanelSize) {\n                return false;\n            }\n\n            let newPanelMinSize = getVNodeProp(this.panels[this.prevPanelIndex + 1], 'minSize');\n\n            if (this.panels[this.prevPanelIndex + 1].props && newPanelMinSize && newPanelMinSize > newNextPanelSize) {\n                return false;\n            }\n\n            return true;\n        },\n        unbindMouseListeners() {\n            if (this.mouseMoveListener) {\n                document.removeEventListener('mousemove', this.mouseMoveListener);\n                this.mouseMoveListener = null;\n            }\n\n            if (this.mouseUpListener) {\n                document.removeEventListener('mouseup', this.mouseUpListener);\n                this.mouseUpListener = null;\n            }\n        },\n        unbindTouchListeners() {\n            if (this.touchMoveListener) {\n                document.removeEventListener('touchmove', this.touchMoveListener);\n                this.touchMoveListener = null;\n            }\n\n            if (this.touchEndListener) {\n                document.removeEventListener('touchend', this.touchEndListener);\n                this.touchEndListener = null;\n            }\n        },\n        clear() {\n            this.dragging = false;\n            this.size = null;\n            this.startPos = null;\n            this.prevPanelElement = null;\n            this.nextPanelElement = null;\n            this.prevPanelSize = null;\n            this.nextPanelSize = null;\n            this.gutterElement = null;\n            this.prevPanelIndex = null;\n        },\n        isStateful() {\n            return this.stateKey != null;\n        },\n        getStorage() {\n            switch (this.stateStorage) {\n                case 'local':\n                    return window.localStorage;\n\n                case 'session':\n                    return window.sessionStorage;\n\n                default:\n                    throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n            }\n        },\n        saveState() {\n            if (isArray(this.panelSizes)) {\n                this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n            }\n        },\n        restoreState() {\n            const storage = this.getStorage();\n            const stateString = storage.getItem(this.stateKey);\n\n            if (stateString) {\n                this.panelSizes = JSON.parse(stateString);\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n\n                children.forEach((child, i) => {\n                    child.style.flexBasis = 'calc(' + this.panelSizes[i] + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                return true;\n            }\n\n            return false;\n        },\n        resetState() {\n            this.initializePanels();\n        }\n    },\n    computed: {\n        panels() {\n            const panels = [];\n\n            this.$slots.default().forEach((child) => {\n                if (this.isSplitterPanel(child)) {\n                    panels.push(child);\n                } else if (child.children instanceof Array) {\n                    child.children.forEach((nestedChild) => {\n                        if (this.isSplitterPanel(nestedChild)) {\n                            panels.push(nestedChild);\n                        }\n                    });\n                }\n            });\n\n            return panels;\n        },\n        gutterStyle() {\n            if (this.horizontal) return { width: this.gutterSize + 'px' };\n            else return { height: this.gutterSize + 'px' };\n        },\n        horizontal() {\n            return this.layout === 'horizontal';\n        },\n        getPTOptions() {\n            return {\n                context: {\n                    nested: this.$parentInstance?.nestedState\n                }\n            };\n        }\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" :data-p-resizing=\"false\" v-bind=\"ptmi('root', getPTOptions)\">\n        <template v-for=\"(panel, i) of panels\" :key=\"i\">\n            <component :is=\"panel\" tabindex=\"-1\"></component>\n            <div\n                v-if=\"i !== panels.length - 1\"\n                ref=\"gutter\"\n                :class=\"cx('gutter')\"\n                role=\"separator\"\n                tabindex=\"-1\"\n                @mousedown=\"onGutterMouseDown($event, i)\"\n                @touchstart=\"onGutterTouchStart($event, i)\"\n                @touchmove=\"onGutterTouchMove($event, i)\"\n                @touchend=\"onGutterTouchEnd($event, i)\"\n                :data-p-gutter-resizing=\"false\"\n                v-bind=\"ptm('gutter')\"\n            >\n                <div :class=\"cx('gutterHandle')\" tabindex=\"0\" :style=\"[gutterStyle]\" :aria-orientation=\"layout\" :aria-valuenow=\"prevSize\" @keyup=\"onGutterKeyUp\" @keydown=\"onGutterKeyDown($event, i)\" v-bind=\"ptm('gutterHandle')\"></div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { getHeight, getOuterHeight, getOuterWidth, getWidth } from '@primeuix/utils/dom';\nimport { isArray } from '@primeuix/utils/object';\nimport { getVNodeProp } from '@primevue/core/utils';\nimport BaseSplitter from './BaseSplitter.vue';\n\nexport default {\n    name: 'Splitter',\n    extends: BaseSplitter,\n    inheritAttrs: false,\n    emits: ['resizestart', 'resizeend', 'resize'],\n    dragging: false,\n    mouseMoveListener: null,\n    mouseUpListener: null,\n    touchMoveListener: null,\n    touchEndListener: null,\n    size: null,\n    gutterElement: null,\n    startPos: null,\n    prevPanelElement: null,\n    nextPanelElement: null,\n    nextPanelSize: null,\n    prevPanelSize: null,\n    panelSizes: null,\n    prevPanelIndex: null,\n    timer: null,\n    mutationObserver: null,\n    data() {\n        return {\n            prevSize: null,\n            isRTL: false\n        };\n    },\n    mounted() {\n        this.initializePanels();\n        this.updateDirection();\n        this.observeDirectionChanges();\n    },\n    beforeUnmount() {\n        this.clear();\n        this.unbindMouseListeners();\n\n        if (this.mutationObserver) {\n            this.mutationObserver.disconnect();\n        }\n    },\n    methods: {\n        updateDirection() {\n            this.isRTL = !!this.$el.closest('[dir=\"rtl\"]');\n        },\n        observeDirectionChanges() {\n            const targetNode = document.documentElement;\n            const config = { attributes: true, attributeFilter: ['dir'] };\n\n            this.mutationObserver = new MutationObserver(() => {\n                this.updateDirection();\n            });\n\n            this.mutationObserver.observe(targetNode, config);\n        },\n        isSplitterPanel(child) {\n            return child.type.name === 'SplitterPanel';\n        },\n        initializePanels() {\n            if (this.panels && this.panels.length) {\n                let initialized = false;\n\n                if (this.isStateful()) {\n                    initialized = this.restoreState();\n                }\n\n                if (!initialized) {\n                    let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n                    let _panelSizes = [];\n\n                    this.panels.map((panel, i) => {\n                        let panelInitialSize = panel.props && panel.props.size ? panel.props.size : null;\n                        let panelSize = panelInitialSize || 100 / this.panels.length;\n\n                        _panelSizes[i] = panelSize;\n                        children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                    });\n\n                    this.panelSizes = _panelSizes;\n                    this.prevSize = parseFloat(_panelSizes[0]).toFixed(4);\n                }\n            }\n        },\n        onResizeStart(event, index, isKeyDown) {\n            this.gutterElement = event.currentTarget || event.target.parentElement;\n            this.size = this.horizontal ? getWidth(this.$el) : getHeight(this.$el);\n\n            if (!isKeyDown) {\n                this.dragging = true;\n                this.startPos = this.layout === 'horizontal' ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n            }\n\n            this.prevPanelElement = this.gutterElement.previousElementSibling;\n            this.nextPanelElement = this.gutterElement.nextElementSibling;\n\n            if (isKeyDown) {\n                this.prevPanelSize = this.horizontal ? getOuterWidth(this.prevPanelElement, true) : getOuterHeight(this.prevPanelElement, true);\n                this.nextPanelSize = this.horizontal ? getOuterWidth(this.nextPanelElement, true) : getOuterHeight(this.nextPanelElement, true);\n            } else {\n                this.prevPanelSize = (100 * (this.horizontal ? getOuterWidth(this.prevPanelElement, true) : getOuterHeight(this.prevPanelElement, true))) / this.size;\n                this.nextPanelSize = (100 * (this.horizontal ? getOuterWidth(this.nextPanelElement, true) : getOuterHeight(this.nextPanelElement, true))) / this.size;\n            }\n\n            this.prevPanelIndex = index;\n            this.$emit('resizestart', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter[index].setAttribute('data-p-gutter-resizing', true);\n            this.$el.setAttribute('data-p-resizing', true);\n        },\n        onResize(event, step, isKeyDown) {\n            let newPos, newPrevPanelSize, newNextPanelSize;\n\n            if (isKeyDown) {\n                if (this.horizontal) {\n                    newPrevPanelSize = (100 * (this.prevPanelSize + step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize - step)) / this.size;\n                } else {\n                    newPrevPanelSize = (100 * (this.prevPanelSize - step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize + step)) / this.size;\n                }\n            } else {\n                if (this.horizontal) {\n                    if (this.isRTL) {\n                        newPos = ((this.startPos - event.pageX) * 100) / this.size;\n                    } else {\n                        newPos = ((event.pageX - this.startPos) * 100) / this.size;\n                    }\n                } else {\n                    newPos = ((event.pageY - this.startPos) * 100) / this.size;\n                }\n\n                newPrevPanelSize = this.prevPanelSize + newPos;\n                newNextPanelSize = this.nextPanelSize - newPos;\n            }\n\n            if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n                this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n                this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n                this.prevSize = parseFloat(newPrevPanelSize).toFixed(4);\n            }\n\n            this.$emit('resize', { originalEvent: event, sizes: this.panelSizes });\n        },\n        onResizeEnd(event) {\n            if (this.isStateful()) {\n                this.saveState();\n            }\n\n            this.$emit('resizeend', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter.forEach((gutter) => gutter.setAttribute('data-p-gutter-resizing', false));\n            this.$el.setAttribute('data-p-resizing', false);\n            this.clear();\n        },\n        repeat(event, index, step) {\n            this.onResizeStart(event, index, true);\n            this.onResize(event, step, true);\n        },\n        setTimer(event, index, step) {\n            if (!this.timer) {\n                this.timer = setInterval(() => {\n                    this.repeat(event, index, step);\n                }, 40);\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n                this.timer = null;\n            }\n        },\n        onGutterKeyUp() {\n            this.clearTimer();\n            this.onResizeEnd();\n        },\n        onGutterKeyDown(event, index) {\n            switch (event.code) {\n                case 'ArrowLeft': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowRight': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowDown': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowUp': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                default:\n                    //no op\n                    break;\n            }\n        },\n        onGutterMouseDown(event, index) {\n            this.onResizeStart(event, index);\n            this.bindMouseListeners();\n        },\n        onGutterTouchStart(event, index) {\n            this.onResizeStart(event, index);\n            this.bindTouchListeners();\n            event.preventDefault();\n        },\n        onGutterTouchMove(event) {\n            this.onResize(event);\n            event.preventDefault();\n        },\n        onGutterTouchEnd(event) {\n            this.onResizeEnd(event);\n            this.unbindTouchListeners();\n            event.preventDefault();\n        },\n        bindMouseListeners() {\n            if (!this.mouseMoveListener) {\n                this.mouseMoveListener = (event) => this.onResize(event);\n                document.addEventListener('mousemove', this.mouseMoveListener);\n            }\n\n            if (!this.mouseUpListener) {\n                this.mouseUpListener = (event) => {\n                    this.onResizeEnd(event);\n                    this.unbindMouseListeners();\n                };\n\n                document.addEventListener('mouseup', this.mouseUpListener);\n            }\n        },\n        bindTouchListeners() {\n            if (!this.touchMoveListener) {\n                this.touchMoveListener = (event) => this.onResize(event.changedTouches[0]);\n                document.addEventListener('touchmove', this.touchMoveListener);\n            }\n\n            if (!this.touchEndListener) {\n                this.touchEndListener = (event) => {\n                    this.resizeEnd(event);\n                    this.unbindTouchListeners();\n                };\n\n                document.addEventListener('touchend', this.touchEndListener);\n            }\n        },\n        validateResize(newPrevPanelSize, newNextPanelSize) {\n            if (newPrevPanelSize > 100 || newPrevPanelSize < 0) return false;\n            if (newNextPanelSize > 100 || newNextPanelSize < 0) return false;\n\n            let prevPanelMinSize = getVNodeProp(this.panels[this.prevPanelIndex], 'minSize');\n\n            if (this.panels[this.prevPanelIndex].props && prevPanelMinSize && prevPanelMinSize > newPrevPanelSize) {\n                return false;\n            }\n\n            let newPanelMinSize = getVNodeProp(this.panels[this.prevPanelIndex + 1], 'minSize');\n\n            if (this.panels[this.prevPanelIndex + 1].props && newPanelMinSize && newPanelMinSize > newNextPanelSize) {\n                return false;\n            }\n\n            return true;\n        },\n        unbindMouseListeners() {\n            if (this.mouseMoveListener) {\n                document.removeEventListener('mousemove', this.mouseMoveListener);\n                this.mouseMoveListener = null;\n            }\n\n            if (this.mouseUpListener) {\n                document.removeEventListener('mouseup', this.mouseUpListener);\n                this.mouseUpListener = null;\n            }\n        },\n        unbindTouchListeners() {\n            if (this.touchMoveListener) {\n                document.removeEventListener('touchmove', this.touchMoveListener);\n                this.touchMoveListener = null;\n            }\n\n            if (this.touchEndListener) {\n                document.removeEventListener('touchend', this.touchEndListener);\n                this.touchEndListener = null;\n            }\n        },\n        clear() {\n            this.dragging = false;\n            this.size = null;\n            this.startPos = null;\n            this.prevPanelElement = null;\n            this.nextPanelElement = null;\n            this.prevPanelSize = null;\n            this.nextPanelSize = null;\n            this.gutterElement = null;\n            this.prevPanelIndex = null;\n        },\n        isStateful() {\n            return this.stateKey != null;\n        },\n        getStorage() {\n            switch (this.stateStorage) {\n                case 'local':\n                    return window.localStorage;\n\n                case 'session':\n                    return window.sessionStorage;\n\n                default:\n                    throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n            }\n        },\n        saveState() {\n            if (isArray(this.panelSizes)) {\n                this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n            }\n        },\n        restoreState() {\n            const storage = this.getStorage();\n            const stateString = storage.getItem(this.stateKey);\n\n            if (stateString) {\n                this.panelSizes = JSON.parse(stateString);\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n\n                children.forEach((child, i) => {\n                    child.style.flexBasis = 'calc(' + this.panelSizes[i] + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                return true;\n            }\n\n            return false;\n        },\n        resetState() {\n            this.initializePanels();\n        }\n    },\n    computed: {\n        panels() {\n            const panels = [];\n\n            this.$slots.default().forEach((child) => {\n                if (this.isSplitterPanel(child)) {\n                    panels.push(child);\n                } else if (child.children instanceof Array) {\n                    child.children.forEach((nestedChild) => {\n                        if (this.isSplitterPanel(nestedChild)) {\n                            panels.push(nestedChild);\n                        }\n                    });\n                }\n            });\n\n            return panels;\n        },\n        gutterStyle() {\n            if (this.horizontal) return { width: this.gutterSize + 'px' };\n            else return { height: this.gutterSize + 'px' };\n        },\n        horizontal() {\n            return this.layout === 'horizontal';\n        },\n        getPTOptions() {\n            return {\n                context: {\n                    nested: this.$parentInstance?.nestedState\n                }\n            };\n        }\n    }\n};\n</script>\n"],"names":["name","BaseComponent","props","layout","type","String","gutterSize","Number","stateKey","stateStorage","step","style","SplitterStyle","provide","$pcSplitter","$parentInstance","BaseSplitter","inheritAttrs","emits","dragging","mouseMoveListener","mouseUpListener","touchMoveListener","touchEndListener","size","gutterElement","startPos","prevPanelElement","nextPanelElement","nextPanelSize","prevPanelSize","panelSizes","prevPanelIndex","timer","mutationObserver","data","prevSize","isRTL","mounted","initializePanels","updateDirection","observeDirectionChanges","beforeUnmount","clear","unbindMouseListeners","disconnect","methods","$el","closest","_this","targetNode","document","documentElement","config","attributes","attributeFilter","MutationObserver","observe","isSplitterPanel","child","_this2","panels","length","initialized","isStateful","restoreState","children","_toConsumableArray","filter","getAttribute","_panelSizes","map","panel","i","panelInitialSize","panelSize","flexBasis","parseFloat","toFixed","onResizeStart","event","index","isKeyDown","currentTarget","target","parentElement","horizontal","getWidth","getHeight","pageX","changedTouches","pageY","previousElementSibling","nextElementSibling","getOuterWidth","getOuterHeight","$emit","originalEvent","sizes","$refs","gutter","setAttribute","onResize","newPos","newPrevPanelSize","newNextPanelSize","validateResize","onResizeEnd","saveState","forEach","repeat","setTimer","_this3","setInterval","clearTimer","clearInterval","onGutterKeyUp","onGutterKeyDown","code","preventDefault","onGutterMouseDown","bindMouseListeners","onGutterTouchStart","bindTouchListeners","onGutterTouchMove","onGutterTouchEnd","unbindTouchListeners","_this4","addEventListener","_this5","resizeEnd","prevPanelMinSize","getVNodeProp","newPanelMinSize","removeEventListener","getStorage","window","localStorage","sessionStorage","Error","isArray","setItem","JSON","stringify","_this6","storage","stateString","getItem","parse","resetState","computed","_this7","$slots","push","Array","nestedChild","gutterStyle","width","height","getPTOptions","_this$$parentInstance","context","nested","nestedState","_openBlock","_createElementBlock","_mergeProps","_ctx","cx","sx","ptmi","$options","_Fragment","_renderList","_createBlock","_resolveDynamicComponent","tabindex","ref","role","onMousedown","$event","onTouchstart","onTouchmove","onTouchend","ptm","_createElementVNode","$data","onKeyup","apply","arguments","onKeydown","_hoisted_2"],"mappings":";;;;;;;AAIA,eAAe;AACXA,EAAAA,IAAI,EAAE,cAAc;AACpB,EAAA,SAAA,EAASC,aAAa;AACtBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAE;AACJC,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA;KACZ;AACDC,IAAAA,UAAU,EAAE;AACRF,MAAAA,IAAI,EAAEG,MAAM;MACZ,SAAS,EAAA;KACZ;AACDC,IAAAA,QAAQ,EAAE;AACNJ,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA;KACZ;AACDI,IAAAA,YAAY,EAAE;AACVL,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA;KACZ;AACDK,IAAAA,IAAI,EAAE;AACFN,MAAAA,IAAI,EAAEG,MAAM;MACZ,SAAS,EAAA;AACb;GACH;AACDI,EAAAA,KAAK,EAAEC,aAAa;EACpBC,OAAO,EAAA,SAAPA,OAAOA,GAAG;IACN,OAAO;AACHC,MAAAA,WAAW,EAAE,IAAI;AACjBC,MAAAA,eAAe,EAAE;KACpB;AACL;AACJ,CAAC;;;;;;;;ACPD,aAAe;AACXf,EAAAA,IAAI,EAAE,UAAU;AAChB,EAAA,SAAA,EAASgB,QAAY;AACrBC,EAAAA,YAAY,EAAE,KAAK;AACnBC,EAAAA,KAAK,EAAE,CAAC,aAAa,EAAE,WAAW,EAAE,QAAQ,CAAC;AAC7CC,EAAAA,QAAQ,EAAE,KAAK;AACfC,EAAAA,iBAAiB,EAAE,IAAI;AACvBC,EAAAA,eAAe,EAAE,IAAI;AACrBC,EAAAA,iBAAiB,EAAE,IAAI;AACvBC,EAAAA,gBAAgB,EAAE,IAAI;AACtBC,EAAAA,IAAI,EAAE,IAAI;AACVC,EAAAA,aAAa,EAAE,IAAI;AACnBC,EAAAA,QAAQ,EAAE,IAAI;AACdC,EAAAA,gBAAgB,EAAE,IAAI;AACtBC,EAAAA,gBAAgB,EAAE,IAAI;AACtBC,EAAAA,aAAa,EAAE,IAAI;AACnBC,EAAAA,aAAa,EAAE,IAAI;AACnBC,EAAAA,UAAU,EAAE,IAAI;AAChBC,EAAAA,cAAc,EAAE,IAAI;AACpBC,EAAAA,KAAK,EAAE,IAAI;AACXC,EAAAA,gBAAgB,EAAE,IAAI;EACtBC,IAAI,EAAA,SAAJA,IAAIA,GAAG;IACH,OAAO;AACHC,MAAAA,QAAQ,EAAE,IAAI;AACdC,MAAAA,KAAK,EAAE;KACV;GACJ;EACDC,OAAO,EAAA,SAAPA,OAAOA,GAAG;IACN,IAAI,CAACC,gBAAgB,EAAE;IACvB,IAAI,CAACC,eAAe,EAAE;IACtB,IAAI,CAACC,uBAAuB,EAAE;GACjC;EACDC,aAAa,EAAA,SAAbA,aAAaA,GAAG;IACZ,IAAI,CAACC,KAAK,EAAE;IACZ,IAAI,CAACC,oBAAoB,EAAE;IAE3B,IAAI,IAAI,CAACV,gBAAgB,EAAE;AACvB,MAAA,IAAI,CAACA,gBAAgB,CAACW,UAAU,EAAE;AACtC;GACH;AACDC,EAAAA,OAAO,EAAE;IACLN,eAAe,EAAA,SAAfA,eAAeA,GAAG;AACd,MAAA,IAAI,CAACH,KAAI,GAAI,CAAC,CAAC,IAAI,CAACU,GAAG,CAACC,OAAO,CAAC,aAAa,CAAC;KACjD;IACDP,uBAAuB,EAAA,SAAvBA,uBAAuBA,GAAG;AAAA,MAAA,IAAAQ,KAAA,GAAA,IAAA;AACtB,MAAA,IAAMC,aAAaC,QAAQ,CAACC,eAAe;AAC3C,MAAA,IAAMC,MAAO,GAAE;AAAEC,QAAAA,UAAU,EAAE,IAAI;QAAEC,eAAe,EAAE,CAAC,KAAK;OAAG;AAE7D,MAAA,IAAI,CAACrB,mBAAmB,IAAIsB,gBAAgB,CAAC,YAAM;QAC/CP,KAAI,CAACT,eAAe,EAAE;AAC1B,OAAC,CAAC;MAEF,IAAI,CAACN,gBAAgB,CAACuB,OAAO,CAACP,UAAU,EAAEG,MAAM,CAAC;KACpD;AACDK,IAAAA,eAAe,EAAfA,SAAAA,eAAeA,CAACC,KAAK,EAAE;AACnB,MAAA,OAAOA,KAAK,CAACvD,IAAI,CAACJ,IAAG,KAAM,eAAe;KAC7C;IACDuC,gBAAgB,EAAA,SAAhBA,gBAAgBA,GAAG;AAAA,MAAA,IAAAqB,MAAA,GAAA,IAAA;MACf,IAAI,IAAI,CAACC,MAAK,IAAK,IAAI,CAACA,MAAM,CAACC,MAAM,EAAE;QACnC,IAAIC,WAAY,GAAE,KAAK;AAEvB,QAAA,IAAI,IAAI,CAACC,UAAU,EAAE,EAAE;AACnBD,UAAAA,WAAU,GAAI,IAAI,CAACE,YAAY,EAAE;AACrC;QAEA,IAAI,CAACF,WAAW,EAAE;AACd,UAAA,IAAIG,QAAS,GAAEC,kBAAA,CAAI,IAAI,CAACpB,GAAG,CAACmB,QAAQ,CAAA,CAAEE,MAAM,CAAC,UAACT,KAAK,EAAA;AAAA,YAAA,OAAKA,KAAK,CAACU,YAAY,CAAC,cAAc,MAAM,eAAe;WAAC,CAAA;UAC/G,IAAIC,WAAY,GAAE,EAAE;UAEpB,IAAI,CAACT,MAAM,CAACU,GAAG,CAAC,UAACC,KAAK,EAAEC,CAAC,EAAK;AAC1B,YAAA,IAAIC,gBAAe,GAAIF,KAAK,CAACtE,KAAM,IAAGsE,KAAK,CAACtE,KAAK,CAACsB,IAAK,GAAEgD,KAAK,CAACtE,KAAK,CAACsB,IAAK,GAAE,IAAI;YAChF,IAAImD,SAAQ,GAAID,gBAAe,IAAK,MAAMd,MAAI,CAACC,MAAM,CAACC,MAAM;AAE5DQ,YAAAA,WAAW,CAACG,CAAC,CAAE,GAAEE,SAAS;YAC1BT,QAAQ,CAACO,CAAC,CAAC,CAAC9D,KAAK,CAACiE,YAAY,OAAM,GAAID,YAAY,MAAK,GAAI,CAACf,MAAI,CAACC,MAAM,CAACC,MAAO,GAAE,CAAC,IAAIF,MAAI,CAACtD,UAAS,GAAI,KAAK;AACnH,WAAC,CAAC;UAEF,IAAI,CAACyB,UAAW,GAAEuC,WAAW;AAC7B,UAAA,IAAI,CAAClC,WAAWyC,UAAU,CAACP,WAAW,CAAC,CAAC,CAAC,CAAC,CAACQ,OAAO,CAAC,CAAC,CAAC;AACzD;AACJ;KACH;IACDC,aAAa,EAAA,SAAbA,aAAaA,CAACC,KAAK,EAAEC,KAAK,EAAEC,SAAS,EAAE;MACnC,IAAI,CAACzD,aAAY,GAAIuD,KAAK,CAACG,aAAc,IAAGH,KAAK,CAACI,MAAM,CAACC,aAAa;AACtE,MAAA,IAAI,CAAC7D,IAAG,GAAI,IAAI,CAAC8D,UAAS,GAAIC,QAAQ,CAAC,IAAI,CAACxC,GAAG,CAAA,GAAIyC,SAAS,CAAC,IAAI,CAACzC,GAAG,CAAC;MAEtE,IAAI,CAACmC,SAAS,EAAE;QACZ,IAAI,CAAC/D,QAAS,GAAE,IAAI;AACpB,QAAA,IAAI,CAACO,QAAO,GAAI,IAAI,CAACvB,MAAK,KAAM,YAAa,GAAE6E,KAAK,CAACS,KAAM,IAAGT,KAAK,CAACU,cAAc,CAAC,CAAC,CAAC,CAACD,KAAI,GAAIT,KAAK,CAACW,KAAI,IAAKX,KAAK,CAACU,cAAc,CAAC,CAAC,CAAC,CAACC,KAAK;AAC9I;AAEA,MAAA,IAAI,CAAChE,gBAAe,GAAI,IAAI,CAACF,aAAa,CAACmE,sBAAsB;AACjE,MAAA,IAAI,CAAChE,gBAAe,GAAI,IAAI,CAACH,aAAa,CAACoE,kBAAkB;AAE7D,MAAA,IAAIX,SAAS,EAAE;QACX,IAAI,CAACpD,aAAc,GAAE,IAAI,CAACwD,UAAS,GAAIQ,aAAa,CAAC,IAAI,CAACnE,gBAAgB,EAAE,IAAI,CAAE,GAAEoE,cAAc,CAAC,IAAI,CAACpE,gBAAgB,EAAE,IAAI,CAAC;QAC/H,IAAI,CAACE,aAAc,GAAE,IAAI,CAACyD,UAAS,GAAIQ,aAAa,CAAC,IAAI,CAAClE,gBAAgB,EAAE,IAAI,CAAE,GAAEmE,cAAc,CAAC,IAAI,CAACnE,gBAAgB,EAAE,IAAI,CAAC;AACnI,OAAE,MAAK;AACH,QAAA,IAAI,CAACE,aAAY,GAAK,GAAI,IAAG,IAAI,CAACwD,UAAW,GAAEQ,aAAa,CAAC,IAAI,CAACnE,gBAAgB,EAAE,IAAI,CAAA,GAAIoE,cAAc,CAAC,IAAI,CAACpE,gBAAgB,EAAE,IAAI,CAAC,CAAC,GAAI,IAAI,CAACH,IAAI;AACrJ,QAAA,IAAI,CAACK,aAAY,GAAK,GAAI,IAAG,IAAI,CAACyD,UAAW,GAAEQ,aAAa,CAAC,IAAI,CAAClE,gBAAgB,EAAE,IAAI,CAAA,GAAImE,cAAc,CAAC,IAAI,CAACnE,gBAAgB,EAAE,IAAI,CAAC,CAAC,GAAI,IAAI,CAACJ,IAAI;AACzJ;MAEA,IAAI,CAACQ,cAAa,GAAIiD,KAAK;AAC3B,MAAA,IAAI,CAACe,KAAK,CAAC,aAAa,EAAE;AAAEC,QAAAA,aAAa,EAAEjB,KAAK;QAAEkB,KAAK,EAAE,IAAI,CAACnE;AAAW,OAAC,CAAC;AAC3E,MAAA,IAAI,CAACoE,KAAK,CAACC,MAAM,CAACnB,KAAK,CAAC,CAACoB,YAAY,CAAC,wBAAwB,EAAE,IAAI,CAAC;MACrE,IAAI,CAACtD,GAAG,CAACsD,YAAY,CAAC,iBAAiB,EAAE,IAAI,CAAC;KACjD;IACDC,QAAQ,EAAA,SAARA,QAAQA,CAACtB,KAAK,EAAEtE,IAAI,EAAEwE,SAAS,EAAE;AAC7B,MAAA,IAAIqB,MAAM,EAAEC,gBAAgB,EAAEC,gBAAgB;AAE9C,MAAA,IAAIvB,SAAS,EAAE;QACX,IAAI,IAAI,CAACI,UAAU,EAAE;AACjBkB,UAAAA,gBAAiB,GAAG,GAAE,IAAK,IAAI,CAAC1E,aAAc,GAAEpB,IAAI,CAAC,GAAI,IAAI,CAACc,IAAI;AAClEiF,UAAAA,gBAAiB,GAAG,GAAE,IAAK,IAAI,CAAC5E,aAAc,GAAEnB,IAAI,CAAC,GAAI,IAAI,CAACc,IAAI;AACtE,SAAE,MAAK;AACHgF,UAAAA,gBAAiB,GAAG,GAAE,IAAK,IAAI,CAAC1E,aAAc,GAAEpB,IAAI,CAAC,GAAI,IAAI,CAACc,IAAI;AAClEiF,UAAAA,gBAAiB,GAAG,GAAE,IAAK,IAAI,CAAC5E,aAAc,GAAEnB,IAAI,CAAC,GAAI,IAAI,CAACc,IAAI;AACtE;AACJ,OAAE,MAAK;QACH,IAAI,IAAI,CAAC8D,UAAU,EAAE;UACjB,IAAI,IAAI,CAACjD,KAAK,EAAE;AACZkE,YAAAA,SAAU,CAAC,IAAI,CAAC7E,QAAS,GAAEsD,KAAK,CAACS,KAAK,IAAI,GAAG,GAAI,IAAI,CAACjE,IAAI;AAC9D,WAAE,MAAK;AACH+E,YAAAA,SAAU,CAACvB,KAAK,CAACS,KAAM,GAAE,IAAI,CAAC/D,QAAQ,IAAI,GAAG,GAAI,IAAI,CAACF,IAAI;AAC9D;AACJ,SAAE,MAAK;AACH+E,UAAAA,SAAU,CAACvB,KAAK,CAACW,KAAM,GAAE,IAAI,CAACjE,QAAQ,IAAI,GAAG,GAAI,IAAI,CAACF,IAAI;AAC9D;AAEAgF,QAAAA,mBAAmB,IAAI,CAAC1E,gBAAgByE,MAAM;AAC9CE,QAAAA,mBAAmB,IAAI,CAAC5E,gBAAgB0E,MAAM;AAClD;MAEA,IAAI,IAAI,CAACG,cAAc,CAACF,gBAAgB,EAAEC,gBAAgB,CAAC,EAAE;QACzD,IAAI,CAAC9E,gBAAgB,CAAChB,KAAK,CAACiE,SAAQ,GAAI,OAAQ,GAAE4B,gBAAiB,GAAE,MAAO,GAAE,CAAC,IAAI,CAAC3C,MAAM,CAACC,MAAK,GAAI,CAAC,IAAI,IAAI,CAACxD,UAAW,GAAE,KAAK;QAChI,IAAI,CAACsB,gBAAgB,CAACjB,KAAK,CAACiE,SAAQ,GAAI,OAAQ,GAAE6B,gBAAiB,GAAE,MAAO,GAAE,CAAC,IAAI,CAAC5C,MAAM,CAACC,MAAK,GAAI,CAAC,IAAI,IAAI,CAACxD,UAAW,GAAE,KAAK;QAChI,IAAI,CAACyB,UAAU,CAAC,IAAI,CAACC,cAAc,CAAA,GAAIwE,gBAAgB;QACvD,IAAI,CAACzE,UAAU,CAAC,IAAI,CAACC,iBAAiB,CAAC,CAAE,GAAEyE,gBAAgB;QAC3D,IAAI,CAACrE,WAAWyC,UAAU,CAAC2B,gBAAgB,CAAC,CAAC1B,OAAO,CAAC,CAAC,CAAC;AAC3D;AAEA,MAAA,IAAI,CAACkB,KAAK,CAAC,QAAQ,EAAE;AAAEC,QAAAA,aAAa,EAAEjB,KAAK;QAAEkB,KAAK,EAAE,IAAI,CAACnE;AAAW,OAAC,CAAC;KACzE;AACD4E,IAAAA,WAAW,EAAXA,SAAAA,WAAWA,CAAC3B,KAAK,EAAE;AACf,MAAA,IAAI,IAAI,CAAChB,UAAU,EAAE,EAAE;QACnB,IAAI,CAAC4C,SAAS,EAAE;AACpB;AAEA,MAAA,IAAI,CAACZ,KAAK,CAAC,WAAW,EAAE;AAAEC,QAAAA,aAAa,EAAEjB,KAAK;QAAEkB,KAAK,EAAE,IAAI,CAACnE;AAAW,OAAC,CAAC;MACzE,IAAI,CAACoE,KAAK,CAACC,MAAM,CAACS,OAAO,CAAC,UAACT,MAAM,EAAA;AAAA,QAAA,OAAKA,MAAM,CAACC,YAAY,CAAC,wBAAwB,EAAE,KAAK,CAAC;OAAC,CAAA;MAC3F,IAAI,CAACtD,GAAG,CAACsD,YAAY,CAAC,iBAAiB,EAAE,KAAK,CAAC;MAC/C,IAAI,CAAC1D,KAAK,EAAE;KACf;IACDmE,MAAM,EAAA,SAANA,MAAMA,CAAC9B,KAAK,EAAEC,KAAK,EAAEvE,IAAI,EAAE;MACvB,IAAI,CAACqE,aAAa,CAACC,KAAK,EAAEC,KAAK,EAAE,IAAI,CAAC;MACtC,IAAI,CAACqB,QAAQ,CAACtB,KAAK,EAAEtE,IAAI,EAAE,IAAI,CAAC;KACnC;IACDqG,QAAQ,EAAA,SAARA,QAAQA,CAAC/B,KAAK,EAAEC,KAAK,EAAEvE,IAAI,EAAE;AAAA,MAAA,IAAAsG,MAAA,GAAA,IAAA;AACzB,MAAA,IAAI,CAAC,IAAI,CAAC/E,KAAK,EAAE;AACb,QAAA,IAAI,CAACA,KAAM,GAAEgF,WAAW,CAAC,YAAM;UAC3BD,MAAI,CAACF,MAAM,CAAC9B,KAAK,EAAEC,KAAK,EAAEvE,IAAI,CAAC;SAClC,EAAE,EAAE,CAAC;AACV;KACH;IACDwG,UAAU,EAAA,SAAVA,UAAUA,GAAG;MACT,IAAI,IAAI,CAACjF,KAAK,EAAE;AACZkF,QAAAA,aAAa,CAAC,IAAI,CAAClF,KAAK,CAAC;QACzB,IAAI,CAACA,KAAM,GAAE,IAAI;AACrB;KACH;IACDmF,aAAa,EAAA,SAAbA,aAAaA,GAAG;MACZ,IAAI,CAACF,UAAU,EAAE;MACjB,IAAI,CAACP,WAAW,EAAE;KACrB;AACDU,IAAAA,eAAe,WAAfA,eAAeA,CAACrC,KAAK,EAAEC,KAAK,EAAE;MAC1B,QAAQD,KAAK,CAACsC,IAAI;AACd,QAAA,KAAK,WAAW;AAAE,UAAA;AACd,YAAA,IAAI,IAAI,CAACnH,MAAO,KAAI,YAAY,EAAE;AAC9B,cAAA,IAAI,CAAC4G,QAAQ,CAAC/B,KAAK,EAAEC,KAAK,EAAE,IAAI,CAACvE,OAAO,CAAC,CAAC,CAAC;AAC/C;YAEAsE,KAAK,CAACuC,cAAc,EAAE;AACtB,YAAA;AACJ;AAEA,QAAA,KAAK,YAAY;AAAE,UAAA;AACf,YAAA,IAAI,IAAI,CAACpH,MAAO,KAAI,YAAY,EAAE;cAC9B,IAAI,CAAC4G,QAAQ,CAAC/B,KAAK,EAAEC,KAAK,EAAE,IAAI,CAACvE,IAAI,CAAC;AAC1C;YAEAsE,KAAK,CAACuC,cAAc,EAAE;AACtB,YAAA;AACJ;AAEA,QAAA,KAAK,WAAW;AAAE,UAAA;AACd,YAAA,IAAI,IAAI,CAACpH,MAAK,KAAM,UAAU,EAAE;AAC5B,cAAA,IAAI,CAAC4G,QAAQ,CAAC/B,KAAK,EAAEC,KAAK,EAAE,IAAI,CAACvE,OAAO,CAAC,CAAC,CAAC;AAC/C;YAEAsE,KAAK,CAACuC,cAAc,EAAE;AACtB,YAAA;AACJ;AAEA,QAAA,KAAK,SAAS;AAAE,UAAA;AACZ,YAAA,IAAI,IAAI,CAACpH,MAAK,KAAM,UAAU,EAAE;cAC5B,IAAI,CAAC4G,QAAQ,CAAC/B,KAAK,EAAEC,KAAK,EAAE,IAAI,CAACvE,IAAI,CAAC;AAC1C;YAEAsE,KAAK,CAACuC,cAAc,EAAE;AACtB,YAAA;AACJ;AAKJ;KACH;AACDC,IAAAA,iBAAiB,WAAjBA,iBAAiBA,CAACxC,KAAK,EAAEC,KAAK,EAAE;AAC5B,MAAA,IAAI,CAACF,aAAa,CAACC,KAAK,EAAEC,KAAK,CAAC;MAChC,IAAI,CAACwC,kBAAkB,EAAE;KAC5B;AACDC,IAAAA,kBAAkB,WAAlBA,kBAAkBA,CAAC1C,KAAK,EAAEC,KAAK,EAAE;AAC7B,MAAA,IAAI,CAACF,aAAa,CAACC,KAAK,EAAEC,KAAK,CAAC;MAChC,IAAI,CAAC0C,kBAAkB,EAAE;MACzB3C,KAAK,CAACuC,cAAc,EAAE;KACzB;AACDK,IAAAA,iBAAiB,EAAjBA,SAAAA,iBAAiBA,CAAC5C,KAAK,EAAE;AACrB,MAAA,IAAI,CAACsB,QAAQ,CAACtB,KAAK,CAAC;MACpBA,KAAK,CAACuC,cAAc,EAAE;KACzB;AACDM,IAAAA,gBAAgB,EAAhBA,SAAAA,gBAAgBA,CAAC7C,KAAK,EAAE;AACpB,MAAA,IAAI,CAAC2B,WAAW,CAAC3B,KAAK,CAAC;MACvB,IAAI,CAAC8C,oBAAoB,EAAE;MAC3B9C,KAAK,CAACuC,cAAc,EAAE;KACzB;IACDE,kBAAkB,EAAA,SAAlBA,kBAAkBA,GAAG;AAAA,MAAA,IAAAM,MAAA,GAAA,IAAA;AACjB,MAAA,IAAI,CAAC,IAAI,CAAC3G,iBAAiB,EAAE;AACzB,QAAA,IAAI,CAACA,iBAAgB,GAAI,UAAC4D,KAAK,EAAA;AAAA,UAAA,OAAK+C,MAAI,CAACzB,QAAQ,CAACtB,KAAK,CAAC;AAAA,SAAA;QACxD7B,QAAQ,CAAC6E,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC5G,iBAAiB,CAAC;AAClE;AAEA,MAAA,IAAI,CAAC,IAAI,CAACC,eAAe,EAAE;AACvB,QAAA,IAAI,CAACA,eAAgB,GAAE,UAAC2D,KAAK,EAAK;AAC9B+C,UAAAA,MAAI,CAACpB,WAAW,CAAC3B,KAAK,CAAC;UACvB+C,MAAI,CAACnF,oBAAoB,EAAE;SAC9B;QAEDO,QAAQ,CAAC6E,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC3G,eAAe,CAAC;AAC9D;KACH;IACDsG,kBAAkB,EAAA,SAAlBA,kBAAkBA,GAAG;AAAA,MAAA,IAAAM,MAAA,GAAA,IAAA;AACjB,MAAA,IAAI,CAAC,IAAI,CAAC3G,iBAAiB,EAAE;AACzB,QAAA,IAAI,CAACA,iBAAkB,GAAE,UAAC0D,KAAK,EAAA;UAAA,OAAKiD,MAAI,CAAC3B,QAAQ,CAACtB,KAAK,CAACU,cAAc,CAAC,CAAC,CAAC,CAAC;AAAA,SAAA;QAC1EvC,QAAQ,CAAC6E,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC1G,iBAAiB,CAAC;AAClE;AAEA,MAAA,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;AACxB,QAAA,IAAI,CAACA,gBAAe,GAAI,UAACyD,KAAK,EAAK;AAC/BiD,UAAAA,MAAI,CAACC,SAAS,CAAClD,KAAK,CAAC;UACrBiD,MAAI,CAACH,oBAAoB,EAAE;SAC9B;QAED3E,QAAQ,CAAC6E,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACzG,gBAAgB,CAAC;AAChE;KACH;AACDmF,IAAAA,cAAc,WAAdA,cAAcA,CAACF,gBAAgB,EAAEC,gBAAgB,EAAE;MAC/C,IAAID,gBAAiB,GAAE,GAAE,IAAKA,gBAAe,GAAI,CAAC,EAAE,OAAO,KAAK;MAChE,IAAIC,gBAAiB,GAAE,GAAE,IAAKA,gBAAe,GAAI,CAAC,EAAE,OAAO,KAAK;AAEhE,MAAA,IAAI0B,gBAAiB,GAAEC,YAAY,CAAC,IAAI,CAACvE,MAAM,CAAC,IAAI,CAAC7B,cAAc,CAAC,EAAE,SAAS,CAAC;AAEhF,MAAA,IAAI,IAAI,CAAC6B,MAAM,CAAC,IAAI,CAAC7B,cAAc,CAAC,CAAC9B,KAAI,IAAKiI,gBAAe,IAAKA,gBAAe,GAAI3B,gBAAgB,EAAE;AACnG,QAAA,OAAO,KAAK;AAChB;AAEA,MAAA,IAAI6B,eAAc,GAAID,YAAY,CAAC,IAAI,CAACvE,MAAM,CAAC,IAAI,CAAC7B,cAAa,GAAI,CAAC,CAAC,EAAE,SAAS,CAAC;AAEnF,MAAA,IAAI,IAAI,CAAC6B,MAAM,CAAC,IAAI,CAAC7B,cAAe,GAAE,CAAC,CAAC,CAAC9B,KAAM,IAAGmI,mBAAmBA,eAAc,GAAI5B,gBAAgB,EAAE;AACrG,QAAA,OAAO,KAAK;AAChB;AAEA,MAAA,OAAO,IAAI;KACd;IACD7D,oBAAoB,EAAA,SAApBA,oBAAoBA,GAAG;MACnB,IAAI,IAAI,CAACxB,iBAAiB,EAAE;QACxB+B,QAAQ,CAACmF,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAClH,iBAAiB,CAAC;QACjE,IAAI,CAACA,iBAAgB,GAAI,IAAI;AACjC;MAEA,IAAI,IAAI,CAACC,eAAe,EAAE;QACtB8B,QAAQ,CAACmF,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACjH,eAAe,CAAC;QAC7D,IAAI,CAACA,kBAAkB,IAAI;AAC/B;KACH;IACDyG,oBAAoB,EAAA,SAApBA,oBAAoBA,GAAG;MACnB,IAAI,IAAI,CAACxG,iBAAiB,EAAE;QACxB6B,QAAQ,CAACmF,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAChH,iBAAiB,CAAC;QACjE,IAAI,CAACA,iBAAgB,GAAI,IAAI;AACjC;MAEA,IAAI,IAAI,CAACC,gBAAgB,EAAE;QACvB4B,QAAQ,CAACmF,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC/G,gBAAgB,CAAC;QAC/D,IAAI,CAACA,mBAAmB,IAAI;AAChC;KACH;IACDoB,KAAK,EAAA,SAALA,KAAKA,GAAG;MACJ,IAAI,CAACxB,QAAS,GAAE,KAAK;MACrB,IAAI,CAACK,IAAG,GAAI,IAAI;MAChB,IAAI,CAACE,QAAS,GAAE,IAAI;MACpB,IAAI,CAACC,mBAAmB,IAAI;MAC5B,IAAI,CAACC,mBAAmB,IAAI;MAC5B,IAAI,CAACE,gBAAgB,IAAI;MACzB,IAAI,CAACD,gBAAgB,IAAI;MACzB,IAAI,CAACJ,gBAAgB,IAAI;MACzB,IAAI,CAACO,iBAAiB,IAAI;KAC7B;IACDgC,UAAU,EAAA,SAAVA,UAAUA,GAAG;AACT,MAAA,OAAO,IAAI,CAACxD,QAAO,IAAK,IAAI;KAC/B;IACD+H,UAAU,EAAA,SAAVA,UAAUA,GAAG;MACT,QAAQ,IAAI,CAAC9H,YAAY;AACrB,QAAA,KAAK,OAAO;UACR,OAAO+H,MAAM,CAACC,YAAY;AAE9B,QAAA,KAAK,SAAS;UACV,OAAOD,MAAM,CAACE,cAAc;AAEhC,QAAA;UACI,MAAM,IAAIC,KAAK,CAAC,IAAI,CAAClI,YAAW,GAAI,0FAA0F,CAAC;AACvI;KACH;IACDmG,SAAS,EAAA,SAATA,SAASA,GAAG;AACR,MAAA,IAAIgC,OAAO,CAAC,IAAI,CAAC7G,UAAU,CAAC,EAAE;AAC1B,QAAA,IAAI,CAACwG,UAAU,EAAE,CAACM,OAAO,CAAC,IAAI,CAACrI,QAAQ,EAAEsI,IAAI,CAACC,SAAS,CAAC,IAAI,CAAChH,UAAU,CAAC,CAAC;AAC7E;KACH;IACDkC,YAAY,EAAA,SAAZA,YAAYA,GAAG;AAAA,MAAA,IAAA+E,MAAA,GAAA,IAAA;AACX,MAAA,IAAMC,OAAQ,GAAE,IAAI,CAACV,UAAU,EAAE;MACjC,IAAMW,WAAY,GAAED,OAAO,CAACE,OAAO,CAAC,IAAI,CAAC3I,QAAQ,CAAC;AAElD,MAAA,IAAI0I,WAAW,EAAE;QACb,IAAI,CAACnH,UAAW,GAAE+G,IAAI,CAACM,KAAK,CAACF,WAAW,CAAC;AACzC,QAAA,IAAIhF,QAAS,GAAEC,kBAAA,CAAI,IAAI,CAACpB,GAAG,CAACmB,QAAQ,CAAA,CAAEE,MAAM,CAAC,UAACT,KAAK,EAAA;AAAA,UAAA,OAAKA,KAAK,CAACU,YAAY,CAAC,cAAc,MAAM,eAAe;SAAC,CAAA;AAE/GH,QAAAA,QAAQ,CAAC2C,OAAO,CAAC,UAAClD,KAAK,EAAEc,CAAC,EAAK;AAC3Bd,UAAAA,KAAK,CAAChD,KAAK,CAACiE,SAAU,GAAE,OAAQ,GAAEoE,MAAI,CAACjH,UAAU,CAAC0C,CAAC,CAAE,GAAE,SAAS,CAACuE,MAAI,CAACnF,MAAM,CAACC,MAAO,GAAE,CAAC,IAAIkF,MAAI,CAAC1I,UAAS,GAAI,KAAK;AACtH,SAAC,CAAC;AAEF,QAAA,OAAO,IAAI;AACf;AAEA,MAAA,OAAO,KAAK;KACf;IACD+I,UAAU,EAAA,SAAVA,UAAUA,GAAG;MACT,IAAI,CAAC9G,gBAAgB,EAAE;AAC3B;GACH;AACD+G,EAAAA,QAAQ,EAAE;IACNzF,MAAM,EAAA,SAANA,MAAMA,GAAG;AAAA,MAAA,IAAA0F,MAAA,GAAA,IAAA;MACL,IAAM1F,MAAK,GAAI,EAAE;MAEjB,IAAI,CAAC2F,MAAM,CAAA,SAAA,CAAQ,EAAE,CAAC3C,OAAO,CAAC,UAAClD,KAAK,EAAK;AACrC,QAAA,IAAI4F,MAAI,CAAC7F,eAAe,CAACC,KAAK,CAAC,EAAE;AAC7BE,UAAAA,MAAM,CAAC4F,IAAI,CAAC9F,KAAK,CAAC;AACtB,SAAA,MAAO,IAAIA,KAAK,CAACO,oBAAoBwF,KAAK,EAAE;AACxC/F,UAAAA,KAAK,CAACO,QAAQ,CAAC2C,OAAO,CAAC,UAAC8C,WAAW,EAAK;AACpC,YAAA,IAAIJ,MAAI,CAAC7F,eAAe,CAACiG,WAAW,CAAC,EAAE;AACnC9F,cAAAA,MAAM,CAAC4F,IAAI,CAACE,WAAW,CAAC;AAC5B;AACJ,WAAC,CAAC;AACN;AACJ,OAAC,CAAC;AAEF,MAAA,OAAO9F,MAAM;KAChB;IACD+F,WAAW,EAAA,SAAXA,WAAWA,GAAG;AACV,MAAA,IAAI,IAAI,CAACtE,UAAU,EAAE,OAAO;AAAEuE,QAAAA,KAAK,EAAE,IAAI,CAACvJ,UAAS,GAAI;OAAM,CAAA,KACxD,OAAO;AAAEwJ,QAAAA,MAAM,EAAE,IAAI,CAACxJ,UAAW,GAAE;OAAM;KACjD;IACDgF,UAAU,EAAA,SAAVA,UAAUA,GAAG;AACT,MAAA,OAAO,IAAI,CAACnF,MAAO,KAAI,YAAY;KACtC;IACD4J,YAAY,EAAA,SAAZA,YAAYA,GAAG;AAAA,MAAA,IAAAC,qBAAA;MACX,OAAO;AACHC,QAAAA,OAAO,EAAE;UACLC,MAAM,EAAA,CAAAF,qBAAA,GAAE,IAAI,CAACjJ,eAAe,MAAAiJ,IAAAA,IAAAA,qBAAA,KAApBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAsBG;AAClC;OACH;AACL;AACJ;AACJ,CAAC;;;;;EClaG,OAAAC,SAAA,EAAA,EAAAC,kBAAA,CAmBK,OAnBLC,UAmBK,CAAA;AAnBC,IAAA,OAAA,EAAOC,IAAE,CAAAC,EAAA,CAAA,MAAA,CAAA;AAAW7J,IAAAA,KAAK,EAAE4J,IAAE,CAAAE,EAAA,CAAA,MAAA,CAAA;AAAW,IAAA,iBAAe,EAAE;AAAe,GAAA,EAAAF,IAAA,CAAAG,IAAI,SAASC,QAAY,CAAAZ,YAAA,CAAA,CAAA,EAAA,EACnGK,SAAA,CAAA,IAAA,CAAA,EAAAC,kBAAA,CAiBUO,QAjBqB,EAAA,IAAA,EAAAC,UAAA,CAAAF,QAAA,CAAA9G,MAAM,EAAnB,UAAAW,KAAK,EAAEC,CAAC,EAAA;;WAAmBA;AAAC,KAAA,EAAA,EAC1C2F,SAAA,EAAA,EAAAU,WAAA,CAAgDC,uBAAhC,CAAAvG,KAAK,CAAE,EAAA;AAAAwG,MAAAA,QAAQ,EAAC;KAAI,CAAA,GAE1BvG,CAAE,KAAIkG,QAAM,CAAA9G,MAAA,CAACC,MAAO,GAAA,CAAA,IAD9BsG,SAAA,EAAA,EAAAC,kBAAA,CAcK,OAdLC,UAcK,CAAA;;;AAZDW,MAAAA,GAAG,EAAC,QAAO;AACV,MAAA,OAAA,EAAOV,IAAE,CAAAC,EAAA,CAAA,QAAA,CAAA;AACVU,MAAAA,IAAI,EAAC,WAAU;AACfF,MAAAA,QAAQ,EAAC,IAAG;AACXG,MAAAA,WAAS,EAAE,SAAXA,WAASA,CAAEC,MAAA,EAAA;AAAA,QAAA,OAAAT,QAAA,CAAAnD,iBAAiB,CAAC4D,MAAM,EAAE3G,CAAC,CAAA;OAAA;AACtC4G,MAAAA,YAAU,EAAE,SAAZA,YAAUA,CAAED,MAAA,EAAA;AAAA,QAAA,OAAAT,QAAA,CAAAjD,kBAAkB,CAAC0D,MAAM,EAAE3G,CAAC,CAAA;OAAA;AACxC6G,MAAAA,WAAS,EAAE,SAAXA,WAASA,CAAEF,MAAA,EAAA;AAAA,QAAA,OAAAT,QAAA,CAAA/C,iBAAiB,CAACwD,MAAM,EAAE3G,CAAC,CAAA;OAAA;AACtC8G,MAAAA,UAAQ,EAAE,SAAVA,UAAQA,CAAEH,MAAA,EAAA;AAAA,QAAA,OAAAT,QAAA,CAAA9C,gBAAgB,CAACuD,MAAM,EAAE3G,CAAC,CAAA;OAAA;AACpC,MAAA,wBAAsB,EAAE;OACjB8F,IAAG,CAAAiB,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAEXC,kBAAA,CAAyN,OAAzNnB,UAAyN,CAAA;AAAnN,MAAA,OAAA,EAAOC,IAAE,CAAAC,EAAA,CAAA,cAAA,CAAA;AAAkBQ,MAAAA,QAAQ,EAAC,GAAI;AAACrK,MAAAA,KAAK,GAAGgK,QAAW,CAAAf,WAAA,CAAA;MAAI,kBAAgB,EAAEW,IAAM,CAAApK,MAAA;MAAG,eAAa,EAAEuL,KAAQ,CAAAtJ,QAAA;MAAGuJ,OAAK;eAAEhB,QAAa,CAAAvD,aAAA,IAAAuD,QAAA,CAAAvD,aAAA,CAAAwE,KAAA,CAAAjB,QAAA,EAAAkB,SAAA,CAAA;AAAA,OAAA,CAAA;AAAGC,MAAAA,SAAO,EAAE,SAATA,SAAOA,CAAEV,MAAA,EAAA;AAAA,QAAA,OAAAT,QAAA,CAAAtD,eAAe,CAAC+D,MAAM,EAAE3G,CAAC,CAAA;OAAA;;OAAW8F,IAAG,CAAAiB,GAAA,CAAA,cAAA,CAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAAO,UAAA,CAAA;;;;;;;;"}